# Generated by Django 5.2.6 on 2025-09-22 14:47

import apps.library.models
import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.core.validators
import django.db.models.deletion
import taggit.managers
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('parent_genre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sub_genres', to='library.genre')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'library_genres',
            },
        ),
        migrations.CreateModel(
            name='TaggedGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField()),
                ('content_type', models.ForeignKey(limit_choices_to=models.Q(('app_label', 'library'), ('model', 'biblio')), on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='library.genre')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('bio', models.TextField(blank=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('nationality', models.CharField(blank=True, max_length=100)),
                ('role', models.CharField(choices=[('author', 'Author'), ('co-author', 'Co-Author'), ('editor', 'Editor'), ('translator', 'Translator')], default='author', max_length=50)),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('object_id', models.UUIDField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'library_authors',
                'indexes': [django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='library_aut_search__22eba9_gin')],
            },
        ),
        migrations.CreateModel(
            name='Cover',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('object_id', models.UUIDField()),
                ('cover_type', models.CharField(choices=[('front', 'Front Cover'), ('back', 'Back Cover'), ('spine', 'Spine'), ('dust_jacket', 'Dust Jacket'), ('thumbnail', 'Thumbnail'), ('high_res', 'High Resolution')], default='front', max_length=20)),
                ('title', models.CharField(help_text='Descriptive title for this cover', max_length=255)),
                ('description', models.TextField(blank=True)),
                ('image_file', models.ImageField(blank=True, help_text='Upload cover image file directly', null=True, upload_to=apps.library.models.cover_upload_path)),
                ('image_url', models.URLField(blank=True, help_text='URL to external cover image')),
                ('file_format', models.CharField(blank=True, choices=[('JPEG', 'JPEG'), ('PNG', 'PNG'), ('WEBP', 'WebP'), ('SVG', 'SVG'), ('GIF', 'GIF')], max_length=10)),
                ('file_size_kb', models.PositiveIntegerField(blank=True, help_text='File size in kilobytes', null=True)),
                ('width', models.PositiveIntegerField(blank=True, help_text='Image width in pixels', null=True)),
                ('height', models.PositiveIntegerField(blank=True, help_text='Image height in pixels', null=True)),
                ('photographer', models.CharField(blank=True, help_text='Cover photographer/designer', max_length=255)),
                ('copyright_info', models.TextField(blank=True, help_text='Copyright information')),
                ('is_primary', models.BooleanField(default=False, help_text='Primary cover to display')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this cover is active/visible')),
                ('quality_rating', models.PositiveSmallIntegerField(blank=True, help_text='Quality rating 1-5 (5 being highest)', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('source', models.CharField(blank=True, help_text='Source of the cover image', max_length=255)),
                ('display_order', models.PositiveIntegerField(default=1, help_text='Display order (1=first image, 2=second image, etc.)')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'library_covers',
                'indexes': [models.Index(fields=['content_type', 'object_id'], name='library_cov_content_021b04_idx'), models.Index(fields=['cover_type'], name='library_cov_cover_t_f1153f_idx'), models.Index(fields=['display_order'], name='library_cov_display_42d0bb_idx'), models.Index(fields=['content_type', 'object_id', 'display_order'], name='library_cov_content_069584_idx'), models.Index(condition=models.Q(('is_primary', True)), fields=['is_primary'], name='primary_covers_idx'), models.Index(condition=models.Q(('is_active', True)), fields=['is_active'], name='active_covers_idx'), models.Index(fields=['file_format'], name='library_cov_file_fo_22a617_idx'), models.Index(fields=['quality_rating'], name='library_cov_quality_2d95bc_idx')],
                'constraints': [models.UniqueConstraint(condition=models.Q(('is_primary', True)), fields=('content_type', 'object_id', 'cover_type'), name='one_primary_cover_per_type'), models.UniqueConstraint(fields=('content_type', 'object_id', 'cover_type', 'display_order'), name='unique_display_order_per_cover_type')],
                'unique_together': {('content_type', 'object_id', 'cover_type', 'is_primary')},
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('address', models.TextField(blank=True)),
                ('website', models.URLField(blank=True)),
                ('role', models.CharField(choices=[('publisher', 'Publisher'), ('co_publisher', 'Co-Publisher'), ('distributor', 'Distributor'), ('original_publisher', 'Original Publisher'), ('reprint_publisher', 'Reprint Publisher')], default='publisher', max_length=50)),
                ('publication_date', models.DateField(blank=True, help_text='Date this publisher released this content', null=True)),
                ('notes', models.TextField(blank=True)),
                ('object_id', models.UUIDField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'library_publishers',
                'indexes': [models.Index(fields=['name'], name='library_pub_name_963899_idx')],
            },
        ),
        migrations.CreateModel(
            name='Biblio',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('title', models.CharField(max_length=500)),
                ('isbn', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('issn', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('original_title', models.CharField(blank=True, help_text='Original title if translated', max_length=500)),
                ('description', models.TextField(blank=True)),
                ('original_publication_date', models.DateField(blank=True, help_text='First publication date of the work', null=True)),
                ('language', models.CharField(default='en', help_text='Original language', max_length=10)),
                ('edition_title', models.CharField(blank=True, help_text='Edition-specific title if different', max_length=500)),
                ('edition_number', models.CharField(blank=True, help_text="e.g., '2nd Edition', 'Revised'", max_length=50)),
                ('edition_type', models.CharField(choices=[('first', 'First Edition'), ('revised', 'Revised Edition'), ('reprint', 'Reprint'), ('anniversary', 'Anniversary Edition'), ('special', 'Special Edition'), ('international', 'International Edition'), ('translation', 'Translation'), ('abridged', 'Abridged Edition'), ('unabridged', 'Unabridged Edition'), ('illustrated', 'Illustrated Edition'), ('other', 'Other')], default='other', max_length=20)),
                ('total_pages', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('file_path', models.CharField(blank=True, max_length=1000)),
                ('file_format', models.CharField(blank=True, choices=[('PDF', 'PDF'), ('EPUB', 'EPUB'), ('MOBI', 'MOBI'), ('TXT', 'Text'), ('HTML', 'HTML'), ('AUDIOBOOK', 'Audiobook'), ('HARDCOVER', 'Hardcover'), ('PAPERBACK', 'Paperback')], max_length=20)),
                ('file_size_mb', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('genres', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='library.TaggedGenre', to='library.Genre', verbose_name='Tags')),
            ],
            options={
                'db_table': 'library_biblios',
                'indexes': [django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='library_bib_search__57dbda_gin'), models.Index(fields=['original_publication_date'], name='library_bib_origina_47694b_idx'), models.Index(fields=['language'], name='library_bib_languag_37d939_idx')],
                'unique_together': {('title', 'isbn', 'issn')},
            },
        ),
    ]
